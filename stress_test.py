进口 asyncio
进口aiohttp
进口随意
进口时间
从urllib.parse进口urlparse

打印("""
 █████╗ ███████╗██╗  ██╗
██╔══██╗██╔════╝╚██╗██╔╝
███████║███████╗ ╚███╔╝ 
██╔══██║╚════██║ ██╔██╗ 
██║  ██║███████║██╔╝ ██╗
╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝
ASX -高级压力测试工具
""")

# 输入处理
目标输入=投入("请输入目标统一资源定位器或互联网协议(Internet Protocol)地址（用逗号分隔): ").使分离(',')
目标=[b.剥夺() 为b在目标输入如果b.剥夺()]

如果 不目标:
    打印("未输入有效的目标地址。程序终止。")
    出口(1)

# 并发数、超时和总请求数
尝试:
并发性=（同Internationalorganizations）国际组织(投入("并发数[500]: ") 或者 500)
超时=（同Internationalorganizations）国际组织(投入("超时[10]: ") 或者 10)
总请求数=（同Internationalorganizations）国际组织(投入("总请求数 [默认666666]: ") 或者 666666)
除...之外值错误:
    打印("并发数、超时和总请求数必须为整数。程序终止。")
    出口(1)

# 请求路径和请求头
请求路径=[
    "/?id= ",
    "/wp-admin/",
    "/.环境",
    "/config.php"
]

请求标题=[
    {"用户代理": " Mozilla/5.0 "},
    {"用户代理": " python-请求"},
    {"用户代理": "卷曲/7.68.0 "}
]

异步ˌ非同步(asynchronous) 极好的 提出请求(会话，url):
    尝试:
        异步ˌ非同步(asynchronous) 随着会话。得到(
url，
标题=随机。选择(请求标题),
超时=超时
        ) 如同回应:
            等待回应。文本()
            返回 真实的
    除...之外例外如同e:
        返回 错误的

异步ˌ非同步(asynchronous) 极好的 执行请求():
连接器= aiohttp。TCP连接器(极限=并发)
    异步ˌ非同步(asynchronous) 随着aiohttp。客户端会话(连接器=连接器) 如同会话:
任务=[]
开始时间=时间。时间()
成功计数=0

        为 _ 在 范围(请求总数):
目标=随机。选择(目标)
路径=随机。选择(请求路径)
            # 确保统一资源定位器以 / 开头
            如果 不路径。开始于('/'):
路径='/'+路径
            # 构建完整的统一资源定位器
url =f"http://{目标}{小路}{随机的。兰丁特(1, 10000)}"
task = asyncio。创建任务(提出请求(会话，url))
任务。附加(工作)

            如果 低输入联网（low-entry networking的缩写）(任务) % 1000 == 0:
                打印(f "已发送{低输入联网（low-entry networking的缩写）(任务)} 请求"，结束=r ')

结果=等待阿辛西奥。聚集(*任务)

结束时间=时间。时间()
经过时间=结束时间-开始时间
成功计数=总和(结果)

        打印(f" n完成！成功率：{成功计数/请求总数*100:。2f}%")
        打印(f "总耗时：{运行时间:. 2f}秒")
        打印(f "速率：{总请求数/已用时间:. 2f} 请求/秒")

极好的 主要的():
    打印("启动中...")
阿辛西奥。奔跑(执行请求())

如果__name__ ==" __main__ ":
    主要的()
