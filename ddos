导入插座
导入时间
导入系统
导入操作系统
随机导入
导入argparse
导入线程
导入并发期货
import json
import ssl
import struct
import string
from datetime import datetime
try:
    from colorama import Fore, Back, Style, init
    init(autoreset=True)
    COLORS_AVAILABLE = True
except ImportError:
    COLORS_AVAILABLE = False
    print("For better display, install colorama: pip install colorama")

# Setup colors
if COLORS_AVAILABLE:
    C_RESET = Style.RESET_ALL
    C_BOLD = Style.BRIGHT
    C_GREEN = Fore.GREEN
    C_BLUE = Fore.BLUE
    C_RED = Fore.RED
    C_YELLOW = Fore.YELLOW
    C_CYAN = Fore.CYAN
    C_MAGENTA = Fore.MAGENTA
else:
    C_RESET = C_BOLD = C_GREEN = C_BLUE = C_RED = C_YELLOW = C_CYAN = C_MAGENTA = ""

# User agents list for HTTP requests
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 Edg/91.0.864.59",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
]

# Main Network Load Testing Class
class NetworkLoadTester:
    def __init__(self):
        self.target = ""
        self.port = 80
        self.threads = 10
        self.duration = 30
        self.packet_size = 1024
        self.protocol = "TCP"
self.http_method = "GET "
        self.http_path = "/"
        self.use_ssl = False
        self.running = False
        self.start_time = 0
        self.packets_sent = 0
        self.bytes_sent = 0
        self.connections = 0
        self.failed = 0
        self.config_file = "loadtest_config.json"
        self.ramp_up = False
        self.custom_payload = ""
        self.payload_name = "Custom"  # New attribute to track current payload
        
        self.spoof_ip = None
        self.spoof_mode = "none"  # none, fixed, random, range
        self.spoof_ip_range_start = None
        self.spoof_ip_range_end = None

        # Dictionary of predefined payloads
        self.predefined_payloads = {
            "minecraft_ping": {
                "name": "Minecraft Server List Ping (1.16.5)",
                "description": "Status request packet for Minecraft servers",
                "protocol": "TCP",
                "port": 25565,
                "payload": b"\x10\x00\x74\x00\x05\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x63\xdd\x01",
                "is_binary": True
            },
            "minecraft_login": {
                "name": "Minecraft Handshake + Status (1.20.1)",
                "description": "Complete handshake followed by a status request",
                "protocol": "TCP",
                "port": 25565,
                "payload": b"\x16\x00\x00\x00\xf9\x03\x09\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x63\xdd\x01\x01\x00",
                "is_binary": True
            },
            "minecraft_login_attempt": {
                "name": "Minecraft Login Request",
                "description": "Simulates a player login sequence start",
                "protocol": "TCP", 
                "port": 25565,
                "payload": b"\x0f\x00\x00\x00\xf9\x03\x09\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x63\xdd\x02\x0c\x00\x07\x54\x65\x73\x74\x55\x73\x65\x72",
                "is_binary": True
            },
            "rdp_connection": {
                "name": "RDP Connection Request",
                "description": "Initial RDP (Remote Desktop) connection packet",
                "protocol": "TCP",
                "port": 3389,
                "payload": b" x03 x00 x00 x13 x0e xe0 x00 x00 x00 x00 x00 x01 x00 x08 x00 x03 x00 x00 x00",
                "is_binary": True
            },
            "rdp_negotiation": {
                "name": "RDP Negotiation Packet",
                "description": "RDP protocol negotiation request",
                "protocol": "TCP",
                "port": 3389,
                "payload": b" x03 x00 x00 x2c x27 xe0 x00 x00 x00 x00 x00 x43 x6f x6f x6b x69 x65 x3a x20 x6d x73 x74 x73 x68 x61 x73 x68 x3d x74 x65 x73 x74 x0d x0a x01 x00 x08 x00 x03 x00 x00 x00",
                "is_binary": True
            },
            "http_basic": {
                "name": "HTTP Basic Request",
                "description": "Simple HTTP GET request",
                "protocol": "HTTP",
                "port": 80,
                "payload": "GET / HTTP/1.1 r nHost: target r nUser-Agent: Mozilla/5.0 r nConnection: close r n r n",
" is_binary ":假
            },
" dns_query": {
"名称":" DNS查询",
"描述":"简单DNS A记录查询"，
“协议”:“UDP”，
【端口】:53，
“有效载荷”:b“x00 x01 x01 x00 x01 x00 x00 x00 x03 x77 x77 x77 x07 x65 x78 x61 x6d X70 x6c x65 x03 x63 x6f x6d x00 x00 x01 x00”，
“is_binary”:真
导入argparse
导入线程
导入并发期货
导入json
导入ssl
导入结构
导入字符串
从日期时间导入日期时间
尝试:
从colorama导入前、后、样式、初始
init(自动重置=真)
颜色_可用=真
除了导入错误:
COLORS_AVAILABLE = False
print("为了更好的显示，安装colorama: pip安装colorama ")
“is_binary”:假
#设置颜色
如果颜色可用:
C_RESET = Style。全部重置
C_BOLD = Style。明亮的
C_GREEN = Fore。绿色的
C_BLUE = Fore。蓝色
    COLORS_AVAILABLE = True
except ImportError:
    COLORS_AVAILABLE = False
    print("For better display, install colorama: pip install colorama")
否则:
# Setup colors
if COLORS_AVAILABLE:
    C_RESET = Style.RESET_ALL
    C_BOLD = Style.BRIGHT
                "name": "Minecraft Server List Ping (1.16.5)",
                "description": "Status request packet for Minecraft servers",
                "protocol": "TCP",
                "port": 25565,
                "payload": b" x10 x00 x74 x00 x05 x6c x6f x63 x61 x6c x68 x6f x73 x74 x63 xdd x01",
                "is_binary": True
else:
            "minecraft_login": {
                "name": "Minecraft Handshake + Status (1.20.1)",
                "description": "Complete handshake followed by a status request",
                "protocol": "TCP",
                "port": 25565,
                "payload": b" x16 x00 x00 x00 xf9 x03 x09 x6c x6f x63 x61 x6c x68 x6f x73 x74 x63 xdd x01 x01 x00",
                "is_binary": True
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 Edg/91.0.864.59",
            ssl_status = f" {C
